% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify_documents.R
\name{classify_documents}
\alias{classify_documents}
\title{Classify Documents with Walk Terms}
\usage{
classify_documents(
  walk_terms,
  group_name,
  document_tokens,
  tokens_var,
  doc_id,
  classification_measure = c("Score", "ScoreMean", "ScoreNorm", "ScoreNormMean",
    "ScoreNormGroup", "ScoreNormGroupMean"),
  classification_cutoff = NULL,
  keep_seed_terms = TRUE,
  seedterm_value = NULL,
  normalize_scores = c("doc", "group", NULL),
  cutoff_value = NULL,
  cutoff_quantile = FALSE,
  cutoff_normalized_scores = TRUE,
  minimum_results = NULL,
  cut_frequent_group_terms = c(NULL, numeric(), "half"),
  return_walk_terms = TRUE,
  return_unclassified_docs = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{walk_terms}{Data frame containing terms generated by `get_rwr_terms()`.}

\item{group_name}{String; Name of the group variable that specifies the classes
into which the documents will be sorted}

\item{document_tokens}{Data frame with the documents to be classified.
Expects tokenized data, with a `doc_id` and one token per row in the `tokens_var`.}

\item{tokens_var}{String; Name of the token variable within the `document_tokens`
data frame (commonly "tokens", "lemma", etc.).}

\item{doc_id}{String; Name of the `doc_id` variable in `document_tokens`.}

\item{classification_measure}{String; name of the measure variable to use for
classification, generated by `get_rwr_terms()`. Must be present in `walk_terms`. One of "Score", "ScoreMean",
"ScoreNorm", "ScoreNormMean", "ScoreNormGroup", or "ScoreNormGroupMean". See `get_rwr_terms()` for details.}

\item{classification_cutoff}{Numerical Cutoff value to filter the `walk_terms`
(optional); NULL to skip. This is useful to apply a stricter cutoff in classification than in
previous steps as all terms below this score will be ignored.}

\item{keep_seed_terms}{Logical indicator whether to keep seed terms even
if their score is lower than the cutoff (only applies if a cutoff is
specified; default: TRUE).}

\item{seedterm_value}{Numerical; Fixed value to set for Seed Term Scores before
classification; NULL to skip (optional). Applies to the specified `classification_measure`.}

\item{normalize_scores}{Method to normalize scores in the documents between 0 and 1.
Options are "doc" (for document-wise normalization), "group" (for group-wise normalization), or NULL to skip (optional).}

\item{cutoff_value}{Numerical value to set scores below which documents will be set
to 0 for a given group, e.g. documents not scoring higher than 0.2 in a category will have the score set to 0
in that category. This can help with retrieving more distinct documents. NULL to skip (optional).}

\item{cutoff_quantile}{Logical indicating whether `cutoff_value` specifies
a quantile rather than a fixed value, cutting off values below the value of the specified quantile (default: FALSE).}

\item{cutoff_normalized_scores}{Logical to apply the cutoff to normalized
scores. Otherwise, normalization is applied after the cutoff (default: TRUE).}

\item{minimum_results}{Minimum number of results for each group to be
returned, bypassing `cutoff_value` if needed; NULL to skip (optional).}

\item{cut_frequent_group_terms}{Numerical, "half" or `NULL` to skip. Specifies whether terms appearing in many
groups should be dropped from classification. If a numerical value is supplied, it specifies the maximum number of
categories a term can occur in before getting dropped. If "half", a term gets dropped when in appearing in more than
half of the categories.}

\item{return_walk_terms}{Logical whether the processed walk terms should
be returned (default: TRUE). Returns the terms actually used for classification, after applying normalization, cutoffs, etc.}

\item{return_unclassified_docs}{Logical whether the IDs of unclassified
documents should be returned (default: TRUE).}

\item{verbose}{Logical indicating if the function should report the number
of unclassified documents (default: TRUE).}
}
\value{
A list containing `classified_documents`, and depending on the
  parameters, also `walk_terms` and `unclassified_documents`. If
  `return_walk_terms` or `return_unclassified_docs` is set to FALSE, the
  function returns a single data frame of `classified_documents`.
}
\description{
This function classifies documents based on previously calculated walk terms.
}
\details{
This functions classifies documents based on the scores returned by `get_rwr_terms()`. For each group of the `group_name` variable,
 it returns a score indicating the connection of the document to this group by summing the scores of each term belonging to each
 group within each document. Depending on settings, this summed score can then be normalized over
 the group (the most distinctive documents within the whole group score highest) or the document (the most distinctive group in a single
 document scores highest) with `normalize_scores`. Additionally, a number of parameters, such as `cutoff_value`, `minimum_results`, and
 `cut_frequent_group_terms` are intended to fine-tune the results without re-running the Random Walks with Restart.
}
\examples{
# the rwr_terms object in this example is created via get_rwr_terms(). See help(get_rwr_terms)

data(de_pol_twitter)

classified_documents <- classify_documents(walk_terms = rwr_terms,
                                           group_name = "ministry_name",
                                           document_tokens = de_pol_twitter,
                                           tokens_var = "lemma",
                                           doc_id = "doc_id",
                                           classification_measure = "ScoreNormMean",
                                           classification_cutoff = NULL,
                                           keep_seed_terms = TRUE,
                                           seedterm_value = NULL,
                                           normalize_scores = "group",
                                           cutoff_value = NULL,
                                           cutoff_quantile = FALSE,
                                           cutoff_normalized_scores = TRUE,
                                           minimum_results = NULL,
                                           cut_frequent_group_terms = NULL,
                                           return_walk_terms = TRUE,
                                           return_unclassified_docs = TRUE,
                                           verbose = TRUE)
}
