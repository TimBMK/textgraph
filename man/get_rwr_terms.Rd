% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_rwr_terms.R
\name{get_rwr_terms}
\alias{get_rwr_terms}
\title{Random Walk with Restart on Multiplex Networks}
\usage{
get_rwr_terms(
  walk_network,
  network_name = NULL,
  seeds,
  seed_var,
  match_var = NULL,
  flatten_results = TRUE,
  group_name = "group",
  positive_scores_only = FALSE,
  normalize_score = c(NULL, "seeds", "group"),
  walk_score = 0.9,
  walk_score_quantile = TRUE,
  report_quantiles = TRUE,
  walk_score_measure = c("default", "raw", "seeds", "seeds_mean", "group", "group_mean"),
  calculate_means = TRUE,
  normalize_means = TRUE,
  reduce_to_means = FALSE,
  keep_seed_terms = TRUE,
  seedterm_value = NULL,
  progress = FALSE
)
}
\arguments{
\item{walk_network}{An object created by `make_multiplex_objects()` that contains
the multiplex network and the Normalized Adjacency Matrix.}

\item{network_name}{Optional name of the network used for matching the match_var;
usually the index when implemented in imap functions; set to NULL to skip.
Requires match_var.}

\item{seeds}{Either a data frame including `seed_var` and `group_name` as variables, or a list of data frames,
where each entry is a dataframe with the `seed_var`.}

\item{seed_var}{String; variable name in the seed dataframes containing the seed terms.}

\item{match_var}{Optional variable in the seed dataframes used to match on the
network_name variable; set to NULL to skip. Requires network_name. This allows to
e.g. only run random walks from seeds associated with a specific timeframe if the
timeframe is provided as the network_name.}

\item{flatten_results}{Logical indicating whether to flatten the results into a single
dataframe or return a list of dataframes for each group.}

\item{group_name}{String; Name of the grouping variable.}

\item{positive_scores_only}{Logical indicating whether to drop negative Walk Scores
and 0 scores ( = very unlikely connection) before normalization.}

\item{normalize_score}{How to normalize scores; "seeds" normalizes the scores for each seed walk,
"group" normalizes within the grouping vars; NULL to skip. Normalizes the raw scores between 0 and 1.
Non-normalized scores are always returned. To return normalized scores over both seeds and groups,
set c("seeds", "groups").}

\item{walk_score}{Numerical; Minimum walk score to retain in results; applied to normalized or raw scores
depending on `normalize_score`; always applies to normalized score if available.
Set `normalize_score` to `NULL` to filter on the raw score (not recommended).
`NULL` to skip. Note that, depending on the network, the return object can become very large when skipped,
as a score for each node in the network is returned.
If `walk_score_quantile` is `TRUE`, this value specifies the quantile in each group.}

\item{walk_score_quantile}{Logical indicating whether to calculate a dynamic minimum walk_score
for each group based on quantiles. If `TRUE`, `walk_score` specifies the quantile, rather than a
fixed value, that is, values lower than the value of this quantile are dropped.}

\item{report_quantiles}{Logical indicating whether to print quantile values for each group. Returns the quantiles of
the selected `walk_score_measure` before any walk_score filtering (i.e. the quantiles used if `walk_score_quantile` is `TRUE`)}

\item{walk_score_measure}{Basis for `walk_score` filtering when multiple normalized scores are returned;
can be "default" (the chosen normalization, defaults to its mean if `calculate_means` is `TRUE`),
"raw" (the raw score), "seeds", "seeds_mean" (if `calculate_means` is `TRUE`), "group",
or "group_mean" (if `calculate_means` is `TRUE`).}

\item{calculate_means}{Logical indicating whether to calculate score means. If `TRUE`, means for all scores,
normalized or not, are returned.}

\item{normalize_means}{Logical indicating whether to normalize the mean scores between 0 and 1.}

\item{reduce_to_means}{Logical indicating whether to reduce output to mean score values only. Recommend for large networks,
as this significantly reduces the size of the returned object.}

\item{keep_seed_terms}{Logical indicating whether seed terms should always be retained regardless
of their score; only available if flatten_results is TRUE.}

\item{seedterm_value}{Optional numerical value to overwrite the score of seed terms with a fixed value, e.g. to rank them generally
higher than the terms calculated by the random walks. Set to NULL to skip.}

\item{progress}{Logical indicating whether to show the progress for the map function.}
}
\value{
A dataframe or a list of dataframes with Random Walk with Restart results, based on flatten_results.
}
\description{
This function performs Random Walk with Restart on multiplex networks
and retrieves terms associated with mutliple seed nodes. It supports mutli-threading, see Details
}
\details{
The function allows to run Random Walks with Restart (RWR) over a number of seeds of different groups, returning results for each group.
 It can be used on a text network to extract features functionally equivalent to a number of seed nodes, returning additional terms
 closely connected to the seed terms provided. By supporting multiple groups of seed nodes, it is easy to compare and analyse cases
 such as the terms connected to the seeds for different topics or those provided by different groups of actors.
 It uses the RandomWalkRestartMH Algorithm developed by Valdeolivas et al. (https://github.com/alberto-valdeolivas/RandomWalkRestartMH).
 Note that, if multiple seeds are provided in a group, the function returns results for each individual seed, rather than running RWRs
 starting at multiple nodes at once.

Multi-threading is supported via the furrr/future packages. Set up a multi-threading plan with `future::plan()` before executing the
 function to enable multithreading for multiple cores, sessions or clusters. Note that, for multi-threading, the full network needs to
 be exported to each node. When exporting large networks in this way, ensure that you have sufficient RAM, as nodes running out of
 RAM may fail abruptly and without notice.
}
\examples{

rwr_terms <- get_rwr_terms(walk_network = multiplex_text_network,
                           network_name = NULL,
                           seeds = seed_terms,
                           seed_var = "feature",
                           match_var = NULL,
                           flatten_results = TRUE,
                           group_name = "ministry_name",
                           positive_scores_only = FALSE,
                           normalize_score = "seeds",
                           walk_score = 0.9,
                           walk_score_quantile = TRUE,
                           report_quantiles = TRUE,
                           walk_score_measure = "seeds_mean",
                           calculate_means = TRUE,
                           normalize_means = TRUE,
                           reduce_to_means = TRUE,
                           keep_seed_terms = TRUE,
                           seedterm_value = NULL,
                           progress = TRUE)


}
\references{
A Valdeolivas, L Tichit, C Navarro, S Perrin, G Odelin, N Levy, P Cau, E Remy, and A Baudot. 2018.
 “Random walk with restart on multiplex and heterogeneous biological networks.” Bioinformatics 35 (3)
}
